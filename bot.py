from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
import json
import logging

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = '8159278233:AAFJ6nwC_GuSogY_Un2D-u4sKQD4pLv9VQE'  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 6841298509    # –ö—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (Telegram user ID)

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ ===
def load_products():
    with open("products.json", encoding='utf-8') as f:
        return json.load(f)

products = load_products()

# === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    for category in products:
        kb.add(InlineKeyboardButton(category, callback_data=f"cat_{category}"))
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

# === –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ===
@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def category_handler(callback: types.CallbackQuery):
    category = callback.data.split("cat_")[1]
    kb = InlineKeyboardMarkup()
    for item in products[category]:
        kb.add(InlineKeyboardButton(item['name'], callback_data=f"item_{category}_{item['id']}"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text(f"üì¶ {category}", reply_markup=kb)

# === –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É ===
@dp.callback_query_handler(lambda c: c.data == "back_main")
async def back_to_main(callback: types.CallbackQuery):
    await start_handler(callback.message)

# === –í–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—É ===
@dp.callback_query_handler(lambda c: c.data.startswith("item_"))
async def item_handler(callback: types.CallbackQuery):
    _, category, item_id = callback.data.split("_", 2)
    item = next((x for x in products[category] if x['id'] == item_id), None)
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    photo = InputFile(item['image'])
    caption = f"<b>{item['name']}</b>\n\n{item['description']}\nüí∏ <b>–¶—ñ–Ω–∞:</b> {item['price']} –≥—Ä–Ω"
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"order_{category}_{item['id']}"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_{category}")
    )
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=caption, parse_mode='HTML', reply_markup=kb)

# === –ü–æ—á–∞—Ç–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ===
user_orders = {}

@dp.callback_query_handler(lambda c: c.data.startswith("order_"))
async def order_start(callback: types.CallbackQuery):
    _, category, item_id = callback.data.split("_", 2)
    user_orders[callback.from_user.id] = {"category": category, "item_id": item_id, "step": 1, "data": {}}
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ <b>–Ü–º‚Äô—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ</b>:", parse_mode='HTML')

@dp.message_handler(lambda m: m.from_user.id in user_orders)
async def order_process(message: types.Message):
    order = user_orders[message.from_user.id]
    step = order['step']

    if step == 1:
        order['data']['name'] = message.text
        order['step'] = 2
        await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>:", parse_mode='HTML')
    elif step == 2:
        order['data']['phone'] = message.text
        order['step'] = 3
        await message.answer("üè© –í–≤–µ–¥—ñ—Ç—å <b>–º—ñ—Å—Ç–æ</b> –¥–æ—Å—Ç–∞–≤–∫–∏:", parse_mode='HTML')
    elif step == 3:
        order['data']['city'] = message.text
        order['step'] = 4
        await message.answer("üè§ –í–≤–µ–¥—ñ—Ç—å <b>–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏</b>:", parse_mode='HTML')
    elif step == 4:
        order['data']['np'] = message.text
        order['step'] = 5
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üí≥ –ù–∞ –∫–∞—Ä—Ç–∫—É", callback_data="pay_card"),
            InlineKeyboardButton("üì¶ –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂", callback_data="pay_cod")
        )
        await message.answer("üí∞ –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("pay_"))
async def order_confirm(callback: types.CallbackQuery):
    pay_method = "–ù–∞ –∫–∞—Ä—Ç–∫—É" if callback.data == "pay_card" else "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂"
    order = user_orders.pop(callback.from_user.id)
    item = next((x for x in products[order['category']] if x['id'] == order['item_id']), None)

    text = f"üî• <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b> üî•\n\n" \
           f"üõïÔ∏è –¢–æ–≤–∞—Ä: {item['name']}\nüí∞ –¶—ñ–Ω–∞: {item['price']} –≥—Ä–Ω\nüí≥ –û–ø–ª–∞—Ç–∞: {pay_method}\n\n" \
           f"üë§ –Ü–º‚Äô—è: {order['data']['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['data']['phone']}\n" \
           f"üè© –ú—ñ—Å—Ç–æ: {order['data']['city']}\nüè§ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü: {order['data']['np']}"

    await bot.send_message(callback.from_user.id, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –∑–≤—ñ–∑–∫—É. üíö")
    await bot.send_message(ADMIN_ID, text, parse_mode='HTML')

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

